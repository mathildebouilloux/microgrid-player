import pulp
import pandas as pd
import numpy as np


class Player:
    
    def __init__(self):
        self.rho_c = 0.95
        self.nb_slow = 2
        self.nb_fast = 2
        self.pslow = 3       #kW
        self.pfast = 22       #kW
        self.horizon = 48
        self.aggregate_charging_power = 40       #kW
        self.battery_capacity = 40       #kWh
        
        
        
    def set_scenario(self, scenario_data):
        d = "01/01/2014"
        self.depart = list(scenario_data[(scenario_data["day"] == d)]["time_slot_dep"][:self.nb_slow + self.nb_fast])
        self.arr = list(scenario_data[(scenario_data["day"] == d)]["time_slot_arr"][:self.nb_slow + self.nb_fast])
    
    def set_prices(self, prices):
        self.prices = prices
    
    def optimisation(self):
        modele = pulp.LpProblem("EV_opti", pulp.LpMinimize)
        
        load_v1g = {}
        capacity_v1g = {}
        
        for t in range(self.horizon):
            load_v1g[t] = {}
            capacity_v1g[t] = {}
            for l in range(self.nb_slow + self.nb_fast) :
                #creation des variables
                ###########################################################
                var_name = "load_"+str(t)+"_EV_"+str(l+1)
                var_name_2 = "capacity_"+str(t)+"_EV_"+str(l+1)
                
                capacity_v1g[t][l] = pulp.LpVariable(var_name_2, 0.0, self.battery_capacity )
                if (l < 2):
                    #EV lents indices 0 et 1
                    load_v1g[t][l] = pulp.LpVariable(var_name, 0.0, self.pslow )
                else:
                    #EV rapides indices 2 et 3
                    load_v1g[t][l] = pulp.LpVariable(var_name, 0.0, self.pfast )
                
                if (t == 0):
                        constraint_name = "charging_zero_"+ str(t) + str(l)
                        modele += capacity_v1g[0][l] == 0.0 , constraint_name
                
                if (t == 2*self.depart[l]):
                    constraint_name = "charging_up_to_25_"+ str(t) + str(l)
                    modele += capacity_v1g[t][l] >= 0.25 * self.battery_capacity , constraint_name
                
                if (t > 0):
                    #capacite obtenue par chargement
                    constraint_name = "load_demand_"+ str(t) + str(l)
                    modele += capacity_v1g[t][l] - capacity_v1g[t-1][l] == self.rho_c * load_v1g[t][l]  , constraint_name
            
            constraint_name = "aggregate_charging_power_"+ str(t)
            modele += pulp.lpSum([ load_v1g[t][l] for l in range(self.nb_slow + self.nb_fast) ]) <= self.aggregate_charging_power, constraint_name
            
        
        
        obj_func = pulp.lpSum([self.prices[t] * load_v1g[t][l] for l in range(self.nb_slow + self.nb_fast) for t in range(self.horizon)]) 
        modele += obj_func
        modele.solve()
        
        
        res = []
        for k in range(self.nb_slow + self.nb_slow):
            l=[]
            for t in range(self.horizon):
                l.append(load_v1g[t][k].value())
            res.append(l)
        
        return (res, modele.objective.value())

if __name__ == "__main__":
    
    scenario_data = pd.read_csv("ev_scenarios.csv", sep=";", decimal=".")
    
    p = Player()
    p.set_scenario(scenario_data)
    #random_lambda = np.random.rand(p.horizon)
    #p.set_prices(random_lambda)
    
    prices_test = [1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3]
    p.set_prices(prices_test)
    
    
    
    resultat = p.optimisation()
    l=resultat[0]
    cout_total = resultat[1]
    
    for k in range(p.nb_slow + p.nb_fast):
        print(l[k])
    print(cout_total)
    
    
